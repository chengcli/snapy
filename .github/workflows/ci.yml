name: Continuous Integration

on:
  pull_request:
    branches: [main]

  push:
    branches: [main]
    tags: [v*]

env:
  PYTHON_VERSION: "3.11"
  BUILD_TYPE: Release

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install style checkers
        run: pip install --user cpplint cppcheck clang-format==20.1.4

      - name: Cache pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pre-commit-

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

  build-and-test:
    needs: pre-commit
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macOS-latest]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install Python dependencies
        run: |
          pip install numpy pytest 'kintera>=0.7.7'

      - name: Install NetCDF
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y libnetcdf-dev
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew update
            brew install netcdf
          fi

     #- name: Cache CMake build
     #   uses: actions/cache@v3
     #   with:
     #     path: ${{ github.workspace }}/build
     #     key: ${{ runner.os }}-cmake-${{ env.BUILD_TYPE }}-${{ hashFiles('**/*.cmake', '**/CMakeLists.txt', '**/*.cpp', '**/*.h') }}
     #     restore-keys: |
     #       ${{ runner.os }}-cmake-${{ env.BUILD_TYPE }}-

      - name: Configure CMake
        run: |
          cmake -B ${{ github.workspace }}/build \
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -DNETCDF=ON \
                -DBUILD_TESTS=ON

      - name: Build
        run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }} --parallel 3

      - name: Install the project
        run: pip install .

      - name: Run C++ & Pybind tests
        run: |
          cd ${{ github.workspace }}/build/tests
          ctest --output-on-failure
